# Main nginx configuration for TransparAI on Elastic Beanstalk
# This configuration ensures compatibility with EB's proxy setup

upstream nodejs {
    server 127.0.0.1:8080;
    keepalive 256;
}

# Rate limiting zones (must be defined at top level)
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=static:10m rate=30r/s;

server {
    listen 80;
    server_name _;

    # Serve frontend build files (React SPA)
    root /var/app/current/frontend-dist;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # API routes - proxy to Node.js backend
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
        
        proxy_pass http://nodejs;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        
        # Handle CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # React SPA - catch all routes
    location / {
        limit_req zone=static burst=50 nodelay;
        try_files $uri $uri/ /index.html;
        
        # No-cache for index.html
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # Handle favicon and robots
    location = /favicon.ico {
        try_files $uri =204;
        access_log off;
        log_not_found off;
    }

    location = /robots.txt {
        try_files $uri =204;
        access_log off;
        log_not_found off;
    }

    # Block sensitive files
    location ~ /\.(env|git|aws|htaccess|htpasswd) {
        deny all;
        return 404;
    }

    # Error handling
    error_page 404 /index.html;
    error_page 429 @rate_limit_exceeded;
    
    location @rate_limit_exceeded {
        return 429 '{"error":"Rate limit exceeded","message":"Too many requests"}';
        add_header Content-Type application/json always;
    }
}